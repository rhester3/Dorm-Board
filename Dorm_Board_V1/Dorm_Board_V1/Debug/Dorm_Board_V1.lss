
Dorm_Board_V1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b8f  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007aa  00000000  00000000  00000e13  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000437  00000000  00000000  000015bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  000019f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000435  00000000  00000000  00001aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003ac  00000000  00000000  00001ee1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000228d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 8e 00 	call	0x11c	; 0x11c <main>
  88:	0c 94 ad 00 	jmp	0x15a	; 0x15a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <LCDcmd>:
	}
}

void LCDcmd(int ch)
{ 
	data_port=ch;
  90:	85 b9       	out	0x05, r24	; 5
	signal_port=(0<<RW)|(0<<RS)|(1<<E);		//Signaling to send commands
  92:	84 e0       	ldi	r24, 0x04	; 4
  94:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	83 ec       	ldi	r24, 0xC3	; 195
  98:	99 e0       	ldi	r25, 0x09	; 9
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <LCDcmd+0xa>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <LCDcmd+0x10>
  a0:	00 00       	nop
	_delay_ms(10);
	signal_port=(0<<RW)|(0<<RS)|(0<<E);
  a2:	18 b8       	out	0x08, r1	; 8
  a4:	81 ef       	ldi	r24, 0xF1	; 241
  a6:	9b e2       	ldi	r25, 0x2B	; 43
  a8:	01 97       	sbiw	r24, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <LCDcmd+0x18>
  ac:	00 c0       	rjmp	.+0      	; 0xae <LCDcmd+0x1e>
  ae:	00 00       	nop
  b0:	83 ef       	ldi	r24, 0xF3	; 243
  b2:	91 e0       	ldi	r25, 0x01	; 1
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <LCDcmd+0x24>
  b8:	00 c0       	rjmp	.+0      	; 0xba <LCDcmd+0x2a>
  ba:	00 00       	nop
  bc:	08 95       	ret

000000be <LCDinit>:
	_delay_ms(2);
}

void LCDinit(void)
{
	LCDcmd(LCD_8bit);
  be:	80 e3       	ldi	r24, 0x30	; 48
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 48 00 	call	0x90	; 0x90 <LCDcmd>
	LCDcmd(LCD_8bit);
  c6:	80 e3       	ldi	r24, 0x30	; 48
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 48 00 	call	0x90	; 0x90 <LCDcmd>
	LCDcmd(LCD_cursorOn);
  ce:	8f e0       	ldi	r24, 0x0F	; 15
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 48 00 	call	0x90	; 0x90 <LCDcmd>
	LCDcmd(LCD_clear);
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 48 00 	call	0x90	; 0x90 <LCDcmd>
  de:	85 ea       	ldi	r24, 0xA5	; 165
  e0:	9e e0       	ldi	r25, 0x0E	; 14
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <LCDinit+0x24>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <LCDinit+0x2a>
  e8:	00 00       	nop
	_delay_ms(15);
	LCDcmd(LCD_entry);
  ea:	86 e0       	ldi	r24, 0x06	; 6
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 48 00 	call	0x90	; 0x90 <LCDcmd>
  f2:	08 95       	ret

000000f4 <USART_Init>:
}

void USART_Init( void )
{
	/*Set baud rate */
	UBRR0H = (unsigned char)(BAUD_PRESCALER>>8);
  f4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)(BAUD_PRESCALER);
  f8:	87 e6       	ldi	r24, 0x67	; 103
  fa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  fe:	88 e1       	ldi	r24, 0x18	; 24
 100:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = 3<<UCSZ00;
 104:	86 e0       	ldi	r24, 0x06	; 6
 106:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 10a:	08 95       	ret

0000010c <USART_Transmit>:
}

void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
 10c:	e0 ec       	ldi	r30, 0xC0	; 192
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	90 81       	ld	r25, Z
 112:	95 ff       	sbrs	r25, 5
 114:	fd cf       	rjmp	.-6      	; 0x110 <USART_Transmit+0x4>
	/* Put data into buffer, sends the data */
	UDR0 = data;
 116:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 11a:	08 95       	ret

0000011c <main>:
/*	CODE BEGIN	*/
int main(void)
{
	const char string[] = "This is a testing message. But it needs to be much longer to test fully. Do you understand?";
	
	data_DDR=0xff;
 11c:	8f ef       	ldi	r24, 0xFF	; 255
 11e:	84 b9       	out	0x04, r24	; 4
	signal_DDR=0xff;
 120:	87 b9       	out	0x07, r24	; 7
 122:	2f e7       	ldi	r18, 0x7F	; 127
 124:	8a e1       	ldi	r24, 0x1A	; 26
 126:	96 e0       	ldi	r25, 0x06	; 6
 128:	21 50       	subi	r18, 0x01	; 1
 12a:	80 40       	sbci	r24, 0x00	; 0
 12c:	90 40       	sbci	r25, 0x00	; 0
 12e:	e1 f7       	brne	.-8      	; 0x128 <main+0xc>
 130:	00 c0       	rjmp	.+0      	; 0x132 <main+0x16>
 132:	00 00       	nop
	_delay_ms(2000);
	signal_port=(1<<RST);
 134:	88 e0       	ldi	r24, 0x08	; 8
 136:	88 b9       	out	0x08, r24	; 8
	LCDinit();
 138:	0e 94 5f 00 	call	0xbe	; 0xbe <LCDinit>
	USART_Init();
 13c:	0e 94 7a 00 	call	0xf4	; 0xf4 <USART_Init>
 140:	2f eb       	ldi	r18, 0xBF	; 191
 142:	86 ec       	ldi	r24, 0xC6	; 198
 144:	9d e2       	ldi	r25, 0x2D	; 45
 146:	21 50       	subi	r18, 0x01	; 1
 148:	80 40       	sbci	r24, 0x00	; 0
 14a:	90 40       	sbci	r25, 0x00	; 0
 14c:	e1 f7       	brne	.-8      	; 0x146 <main+0x2a>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <main+0x34>
 150:	00 00       	nop
	//USART_Init(9600);
	
	_delay_ms(15000);
	while(1)
	{
		USART_Transmit('R');
 152:	82 e5       	ldi	r24, 0x52	; 82
 154:	0e 94 86 00 	call	0x10c	; 0x10c <USART_Transmit>
 158:	fc cf       	rjmp	.-8      	; 0x152 <main+0x36>

0000015a <_exit>:
 15a:	f8 94       	cli

0000015c <__stop_program>:
 15c:	ff cf       	rjmp	.-2      	; 0x15c <__stop_program>
